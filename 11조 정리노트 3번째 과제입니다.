연산자는산술 연산자인 +, -, *, /와 같이 이미 정의된 연산을 수행하는 기호이다.
피연산자는 연산에 참여하는 변수나 값을 의미한다. 
연산자의 종류는 산술, 관계, 증감, 논리, 조건, 비트 논리, 비트 이동, 대입 연산자로 나뉜다. 
대입 연산자는 = 기호로 프로그램에서 가장 기본이 되는 연산자로 대입 연산자가 맨 마지막에 수행된다.
수학과의 차이점은 대입 연산자를 기준으로 오른쪽에 있는 수식을 먼저 실행 후 결과를 왼쪽값이다. 
산술연산자는 연산자가 다루는 피연산자의 개수에 따라 단항 연산자와 이항 연산자로 나뉜다.
단항 연산자는 피연산자를 1개만 사용하는 산술 연산자이고 증강 연산자는 오른쪽에서 왼쪽으로 적용된다.
증감 연산자를 사용하면 연산의 처리 속도가 좀 더 빨라진다. 
이항 연산자는 피연산자가 2개가 필요한 산술 연산자로 사칙연산과 나머지 연산자를 포함한다. 
나눗셈 연산자는 정수형 변수에 사용하는 몫만 값으로 저장되고 나머지는 없어진다.
나머지 연산자는 나머지만 저장된다. 
관계 연산자는 두 수 사이의 대소 관계와 특정 조건을 검사할때 사용하는 연산자이다. 
관계가 성립되면 참, 성립되지 않으면 거짓으로 표시된다.
논리 연산자는 조건 여러 개를 결합하여 판정하는 연산자로 AND, OR, NOT의 논리 연산을 수행한다.
참일때는 1로, 거짓일때는 0으로 결과를 표시한다. 
논리 연산자의 우선순위는 단항 연산자인 !이 가장 높고 다음이 &&이며 ||가 가장 낮다.
&&과 ||이 같이 쓰이면 &&이 먼저 수행된다.
비트 연산자는 피연산자 정숫값을 비트 단위로 논리 연산을 수행하는 연산자이다
AND, OR, NOT의 기본 논리식으로 이루어진다.
4비트로 표현할 수 있는 정보의 양이다.
1비트로는 데이터를 2개, 2비트로는 4개, N비트로는 2N개를 나타낼수 있습니다. 
데이터가 4비트인 시프트 연산은 shift 연산은 비트를 오른족이나 왼쪽으로 이동하고
>> 연산은 비트를 오른쪽으로 옮겨 값을 감소시키고, << 연산은 왼쪽으로 옮겨 값을 증가시킨다. 
콤마 연산자는 수식 2개를 문장 1개로 표현할 때 사용한다. 
sizeof 연산자는 변수나 자료형의 크기를 알고 싶을 때 사용한다. 
마지막으로 연산자 우선순위는 단항> 산술 > 이동 > 관계 > 비트 > 논리 > 조건 > 대입 순위ㅏ.
연산자 우선순위의 원칙은  ( ) 안의 내용을 먼저 처리한다.
단항 연산자를 이항 연산자보다 먼저 처리한다.
증감 연산자는 위치에 따라 처리되는 순서가 다르지만 대개 왼쪽에서 오른쪽으로 수행하는 것이 원칙이다.
