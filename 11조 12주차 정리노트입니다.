 int main(void)
 {
char *pC = "C programming";
printf("문자열을 변환기호를 이용해서 출력\n");
printf("%s\n", pC);
printf("반복문을 이용해 한 글자씩 출력\n");
while(*pC)
printf("%c", *pC+ +);
printf("\n");
return 0;
}
이 예제는 포인터를 이용하여 문자열을 출력하는 방식인데 
포인터를 이용한 문자열 선언 방법은 
char *포인터명 = "문자열";
예제에서 찾아볼수가 있다.
char *pC = "C programming"; -> pC가 포인트명, C programming가 문자열이 된다.

int main(void)
{
char *pStr[] = {"english", "math", "korean"};
char subject[][8] = {"english", "math", "korean"};
int i;
printf("포인터 배열을 이용해서 문자열을 출력합니다.\n");
for(i = 0; i < 3; i+ +)
printf("pStr[%d] = %s\n", i, pStr[i]);
printf("2차원 배열을 이용해서 문자열을 출력합니다.\n");
for(i = 0; i < 3; i+ +)
printf("subject[%d] = %s\n", i, subject[i]);
return 0;
}
이 예제는 포인터 배열을 이용하여 문자열을 출력하는 프로그램을 만드는데 
포인터가 여러개 일경우는 배열 포인터를 사용한다. 배열 포인터는 문자열을 동시에 여러 개 만들어야 하는 경우 유용하다. 배열 포인터 사용하는 이유는 불필요한 메모리 낭비를 막을 수 있기 때문에 배열의 크기를 초기에 지정하지
않아도 된다. 그리고 2차원 배열을 이용하면 문자가 가장 많은 문자열이 기준이 되기 때문에 메모리낭비가 발생하기 떄문이다. 
char *pStr[] = {"english", "math", "korean"};
이게 배열 포인터를 사용한 것이라고 볼수가 있다. 
char subject[][8] = {"english", "math", "korean"};
이것은 2차원 배열을 사용한 것이라고 볼수가 있다.

int main(void)
{
char *pC = "c language";
while (*pC
)
{
printf("%c", *pC-32);
pC++;
}
printf("\n");
return 0;
}
이 예제는 소문자를 대문자로 바꾸는 예제인데 printf("%c", *pC-32); pC++; 이 함수를 이용해서 대문자로 바꿀수 있다.


int strleng(char *ch);
int main(void)
{
int len;
char str[ ] = "c language and data structure";
len = strleng(str);
printf("문자열의 크기는 %d다.\n", len);
return 0;
}
int strleng(char *ch)
{
int index;
for(index = 0; *(ch+index) != '\0'; index+ +);
return index;
}
이 예제는 문자열의 크기를 알아내는 예제로 결과는 문자열의 크기는 29가 나온다.
int strleng(char *ch)이 코드가 문자열의 크기를 알아내는 코드다.

구조체는 서로 다른 자료형을 하나의 자료로 구조화한 자료형이다. 키워드 struct를 사용하여 정의한다. struct 안의 각 구성 요소는 멤버라 부르며 중괄호({ }) 안에 정의하고 마지막 중괄호( }) 다음에 반드시 세미콜론(;)을 넣어야 한다.

그에 대한 예시는 제목 저자 출판년도 쪽수 가격이라는 다른 자료형을 도서관 대출이라는 하나의 자료로 구조화한 자료형이 구조체라고 한다.

struct list {
	char name;
	char gender;
	int age;
};
int main(void)
{
	struct list st1 = { 'T','M',25 };

	printf("구조체 list의 크기는 %d이다. \n", sizeof(struct list));
	printf("구조체 객체 st1의 크기는 %d이다.\n", sizeof(st1));
	return 0;
}

이 예제는 구조체의 메모리 크기를 확인하는 코드이고
 구조체 list의 크기는 8이다
구조체 객체 st1의 크기는 8이다 라는 결과가 나오게 된다.

struct list {
	char name;
	char gender;
	int age;
};
int main(void)
{
	struct list st1, st2;
	st1.name = 'T';
	st1.gender = 'M';
	st1.age = 25;

	st2.name = 'S';
	st2.gender = 'F';
	st2.age = 28;

	printf("이름 성별 나이\n");
	printf("-----------------------\n");
	printf(" %c %c %d\n", st1.name, st1.gender, st1.age);
	printf(" %c %c %d\n", st2.name, st2.gender, st2.age);
	
	 return 0;

}
이번에는 도트 연산자를 이용하여 구조체 접근하는 예제인데 

st1, st2의 이름과 성별 나이가 다 공개가 되었다. 
st1 이름 T, 성별 M, 나이 25이고 st2 이름 S, 성별 F, 나이 28이다.

typedef는 자료형을 재정의하는 키워드다.
 typedef를 이용하여 구조체의 자료형을 재정의하는 방법은 구조체의 정의를 먼저 잡고 자료형의 재정의를 한다음에 구조체 객체의 선언을 하면 구조체의 자료형을 재정의하는 방법이다.
struct students {
char name[20];
char address[30];
int age;
};

typedef struct students student;
int main(void)
{
student st1 = {"Moon", "Seoul", 25};
struct students st2 = {"John", "London", 30};
printf("학생 1은 성이 %s이고 %s에 살며 %d살이다.\n", st1.name, st1.address, st1.age);
printf("학생 2는 성이 %s이고 %s에 살며 %d살이다.\n", st2.name, st2.address, st2.age);

return 0;
}
여기를 보면 
struct students {
char name[20];
char address[30];
int age;
};
이 코드가 구조체의 정의가 되고 
typedef struct students student;
이 함수가 자료형의 재정의가 된다.
student st1 = {"Moon", "Seoul", 25};
그리고 이 코드는 구조체 객체의 선언이 된다. 이것들이 구조체 재정의로 구조체 사용하는 방법이다.

포인터를 이용한 구조체 사용는 도트 연산자와 화살표 연산자가 있는데 도트 연산자는 일변 변수 형태로 정의한 구조체의 멤버 변수에 접근하고, 화살표 연산자는 포인터 변수 형태로 정의한 구조체의 멤버 변수에 접근한다.

struct ThreeDime {
double x;
double y;
double z;
};

typedef struct ThreeDime ThreeDime;

int main(void)
{
ThreeDime A1 = {3, 1, 8};
ThreeDime* pA1 = &A1;
printf("3차원 점 A1의 x : %.2lf, y : %.2lf, z : %.2lf이다.\n", pA1->x, pA1->y, pA1->z);
return 0;
}

이 예제에서 우리는 구조체 포인터의 사용 방법을 알수가 있다.
struct ThreeDime {
double x;
double y;
double z;
};
typedef struct ThreeDime ThreeDime;
ThreeDime A1= {3, 1, 8};
ThreeDime* pA1 = &A1; 이것은 구조체 포인터의 선언과 초기화를 하고
pA1->x, pA1->y, pA1->z 이것은 구조체 포인터를 이용한 구조체 멤버 접근 형식과 사용하는 방법이다.


구조체의 사용은 여러가지가 있다
구조체를 인자로 받는 함수중에서는 3차원상의 한 점과 원점의 거리를 구하는 함수, 3차원상의 두 점 간 거리를 구하는 함수, 3차원상의 한 점을 원점에 대칭시킨 점을 구하는 함수가 있다.
물론 구조체의 포인터를 인자로 받는 함수도 존재한다.

열거형은 순서가 있고 새로운 값을 가질수 있는 사용자 정의 자료형이다.

 int main(void)
{
enum{yellow, red, blue, green} color;
printf("원하는 색을 입력하세요.\n");
printf("0번 : 노란색, 1번 : 빨간색\n");
printf("2번 : 파란색, 3번 : 초록색\n");
scanf("%d", &color);
if(color == yellow) printf("노란색입니다.\n");
else if(color == red) printf("빨간색입니다.\n");
else if(color == blue) printf("파란색입니다.\n");
else if(color == green) printf("초록색입니다.\n");
return 0;
}

이 예시는 color를 열거형을 사용해서 만든 코드이다.
enum{yellow, red, blue, green} color; 이 코드는 열거형의 선언을 한거다.

if(color == yellow) printf("노란색입니다.\n");
else if(color == red) printf("빨간색입니다.\n");
else if(color == blue) printf("파란색입니다.\n");
else if(color == green) printf("초록색입니다.\n");
이 코드는 color를 열거형으로 선언한 프로그래밍을 만들었다.
printf("0번 : 노란색, 1번 : 빨간색\n");
printf("2번 : 파란색, 3번 : 초록색\n");
그리고 이 코드는 정수형 변수인 color 값에 따라서 색을 표시하도록 프로그래밍을 한것이다.

따라서 결과는 
원하는 색을 입력하세요.
0번 : 노란색, 1번: 빨간색
2번 :파란색, 3번 : 초록색
2 
파란색입니다.
라는 결과가 나온다.
