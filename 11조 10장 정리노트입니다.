1.
#include <stdio.h>

int main(void)
{
	int i = 10;
	int* ptr = &i;

	printf("ptr의 주소 값 : %p\n", &ptr);
	printf("i의 주소 값 : %p\n", &i);
	printf("i의 주소 값 : %p\n\n", ptr);

	printf("i의 주소 값 : %d\n", i);
	printf("ptr의 주소 값 : %d\n", *ptr);

	return 0;
}
포인트의 기본을 사용해서 일반 변수로의 접근을 시도하고
포인터를 통해 일반 변수의 값으로 접근한다. 

2.
#include <stdio.h>

void Swap(int a, int b);
int main(void)
{
	int x = 10, y = 5;
	printf("Swap() 함수 실행 전\n");
	printf(" x= %d, y= %d이다. \n\n", x, y);

	Swap(x, y);
	printf("Swap() 함수 실행 후\n");
	printf(" x= %d, y= %d이다. \n\n", x, y);
	
	return 0;

}
void Swap(int a, int b);
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}
포인터를 이용하지 않고 두수를 바꾸는 방식인데
함수 실행 전에는 x= 10, y=5라는 결과 값이 나오고 
함수를 실행한 후에는 x= 10, y= 5가 나오게 된다.
포인터의 기본으로 포인터를 사용하지 않은 프로그램은 main() 함수에서 선언한 지역변수이기 때문에 메모리에 살아 있어 원래 값 그대로 출력하게 된다.

3.
#include <stdio.h>

void Swap(int a, int b);
int main(void)
{
	int x = 10, y = 5;
	printf("Swap() 함수 실행 전\n");
	printf(" x= %d, y= %d이다. \n\n", x, y);

	Swap(&x, &y);
	printf("Swap() 함수 실행 후\n");
	printf(" x= %d, y= %d이다. \n\n", x, y);
	
	return 0;

}
void Swap(int** a, int** b);
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}
포인터를 이용고 두수하를 바꾸는 방식인데
함수 실행 전에는 x= 10, y=5라는 결과 값이 나오고 
함수를 실행한 후에는 x= 5, y= 10가 나오게 된다.
포인터를 함수의 인자로 사용하면 주소 값을 전달할 수 있으므로 변수 자체가
함수에 전달되어 두 수의 값을 바꿀 수 있다.

4.
#include <stdio.h>

void Countlncrement1(int n);//값으로 전달
void Countlncrement2(int **n);//주소로 전달 

int main(void)
{
	int a;
	printf("a의 초깃값 :%d\n", a);
	Countlncrement1(a);
	printf("CountIncrement1 함수 실행 후 a의 값 : %d\n", a);

	Countlncrement2(&a);
	printf("CountIncrement2 함수 실행 후 a의 값 : %d\n", a);

	return 0;
}
void Countlncrement1(int n)
{
	n++;
}
void Countlncrement2(int** n)
{
	(*n)++;
}

이번에는 인자 전달 방법으로 
값으로 전달할 때는 함수가 호출되면 인자 값을 스택에 복사하고 
값을 복사하기 때문에 함수에서 인자 값을 바꾸더라도 main()함수는 영향을 안받음 독립적이고 안전하다.
주소로 전달할때는 함수에 변수 자체를 전달해야 할때 사용하고 
주소 연산자(&)를 이용하여 변수의 주소 값을 함수에 넘겨주고, 간접 연산자(*)
를 이용하여 주소 값이 가리키는 값을 읽거나 저장한다.

5.
#include <stdio.h>

int main(void)
{
	int a[] = { 10,20,30,40,50 };
	int* p = a;
	int i;

	printf("배열명 a를 이용한 주소 표현\n");
	for (i = 0; i < 5; i++)
		printf("a[%d]의 주소 %p\n", i, a + i);
	
	printf("\n 포인터  p를 이용한 배열 주소 표현\n");
	for (i = 0; i < 5; i++)
		printf("a[%d]의 주소 %p\n", i, p + i);


	printf("\n 포인터  p를 이용한 배열 값 표현\n");
	for (i = 0; i < 5; i++)
		printf("a[%d]의 주소 %d\n", i, *(p + i));
}
이번에는 포인터와 배열의 관계를 이용한 것이다
*a와 a[0]은 같은 의미를 가지며 *p는 포인터 변수 p가 가리키는 곳에 들어 있는 값을 의미하므로 a[0]과 같다.

6.
#include <stdio.h>

int SumArray(int* pA, int Size);
int main(void)
{
	int a[] = { 10,5,15,25,7 };
	int Sum;
	Sum = SumArray(a, 5);
	printf("배열의 합 : %d \n", Sum);

	return 0;
}
int SumArray(int* pA, int Size)
{
	int result = 0, i;
	for (i = 0; i < Size; i++)
		result += pA[i];
	return result;
}
이번에는 포인터를 이용하여 배열을 함수 인자로 전달하기다
배열의 합은 62가 나온다 
